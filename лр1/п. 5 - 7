class Client {
    private int id;
    private String name;
    private String surname;
    private String patronymic;
    private int total_survices;

    public Client(int id, String name, String surname, String patronymic, int total_survices) {
        this.setId(id);
        this.setName(name);
        this.setSurname(surname);
        this.setPatronymic(patronymic);
        this.setSurvices(total_survices);
    }

public Client (String clientData) {
        // В формате: "id,name,surname,patronymic,total_services"
        String[] data = clientData.split(",");
        if (data.length != 5) {
            throw new IllegalArgumentException("Неверный формат данных.");
        }

        this.setId(Integer.parseInt(data[0].trim()));
        this.setName(data[1].trim());
        this.setSurname(data[2].trim());
        this.setPatronymic(data[3].trim());
        this.setSurvices(Integer.parseInt(data[4].trim()));
    }

    public Client(String json, boolean isJSON) {
        if (!isJSON) {
            throw new IllegalArgumentException("Для строки используйте другой конструктор.");
        }

        json = json.trim().replaceAll("[{}\"]", "");
        String[] keyValuePairs = json.split(",");

        for (String pair : keyValuePairs) {
            String[] keyValue = pair.split(":");
            String key = keyValue[0].trim();
            String value = keyValue[1].trim();

            switch (key) {
                case "id":
                    this.setId(Integer.parseInt(value));
                    break;
                case "name":
                    this.setName(value);
                    break;
                case "surname":
                    this.setSurname(value);
                    break;
                case "patronymic":
                    this.setPatronymic(value);
                    break;
                case "total_survices":
                    this.setSurvices(Integer.parseInt(value));
                    break;
                default:
                    throw new IllegalArgumentException("Неизвестное поле: " + key);
            }
        }
    }

    //Геттеры
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getSurname() {
        return surname;
    }

    public String getPatronymic() {
        return patronymic;
    }

    public int getSurvices() {
        return total_survices;
    }

    //Сеттеры
    public void setId(int id) {
        this.id = validateI(id, "ID должен быть положительным числом.");
    }

    public void setName(String name) {
        this.name = validateS(name, "Имя не может быть пустым.");
    }

    public void setSurname(String surname) {
        this.surname = validateS(surname, "Фамилия не может быть пустой.");
    }

    public void setPatronymic(String patronymic) {
        this.patronymic = validateS(patronymic, "Отчество не может быть пустым.");
    }

    public void setSurvices(int total_survices) {
        this.total_survices = validateI(total_survices, "Количество услуг не может быть отрицательным.");
    }

    public static String validateS(String value, String ex) {
        if (value == null || value.trim().isEmpty()) {
            throw new IllegalArgumentException(ex);
        }
        else
            return value;
    }

    public static int validateI(int val, String ex) {
        if (val <= 0) {
            throw new IllegalArgumentException(ex);
        }
        else
            return val;
    }

    @Override
    public String toString() {
        return "Client{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", surname='" + surname + '\'' +
                ", patronymic='" + patronymic + '\'' +
                ", total_services='" + total_survices + '\'' +
                '}';
    }

    public String toShortString() {
        return "Client{" +
                "name = " + name + '\'' +
                ", surname = " + surname + '\'' +
                '}';
    }

    public boolean equals(Object o) {
        if (this == o) return true;  // Сравнение ссылок
        if (o == null || getClass() != o.getClass()) return false;  // Проверка на null и тип
        Client client = (Client) o;  // Приведение типов
        return id == client.id &&
                total_survices == client.total_survices &&
                name.equals(client.name) &&
                surname.equals(client.surname) &&
                patronymic.equals(client.patronymic);
    }
}
